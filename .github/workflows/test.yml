name: Tests

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.8, 3.9, "3.10", "3.11"]

    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_medical_text_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-test.txt

    - name: Set up environment variables
      run: |
        echo "DATABASE_URL=postgresql://postgres:postgres@localhost:5432/test_medical_text_db" >> $GITHUB_ENV
        echo "TESTING=1" >> $GITHUB_ENV
        echo "LOG_LEVEL=WARNING" >> $GITHUB_ENV
        echo "MODEL_PATH=models" >> $GITHUB_ENV

    - name: Create mock model for testing
      run: |
        mkdir -p models
        echo '{"0": "Neurological & Cognitive Disorders", "1": "Cancers", "2": "Cardiovascular Diseases", "3": "Metabolic & Endocrine Disorders", "4": "Other Age-Related & Immune Disorders"}' > models/reverse_label_mapping.json
        echo '{"Neurological & Cognitive Disorders": 0, "Cancers": 1, "Cardiovascular Diseases": 2, "Metabolic & Endocrine Disorders": 3, "Other Age-Related & Immune Disorders": 4}' > models/label_mapping.json
        # Note: For full integration tests, you would need to download the actual trained model
        # For now, tests will use mock/rule-based classification

    - name: Run linting
      run: |
        flake8 src tests --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 src tests --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

    - name: Run type checking
      run: |
        mypy src --ignore-missing-imports

    - name: Run security checks
      run: |
        bandit -r src -f json -o bandit-report.json || true

    - name: Run unit tests
      run: |
        python run_tests.py --unit --coverage

    - name: Run integration tests
      run: |
        python run_tests.py --integration --coverage

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

    - name: Upload test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: test-results-${{ matrix.python-version }}
        path: |
          htmlcov/
          coverage.xml
          bandit-report.json

  e2e-tests:
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_medical_text_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python 3.10
      uses: actions/setup-python@v4
      with:
        python-version: "3.10"

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-test.txt

    - name: Set up Node.js for frontend
      uses: actions/setup-node@v3
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json

    - name: Install frontend dependencies
      run: |
        cd frontend
        npm ci

    - name: Build frontend
      run: |
        cd frontend
        npm run build

    - name: Set up environment variables
      run: |
        echo "DATABASE_URL=postgresql://postgres:postgres@localhost:5432/test_medical_text_db" >> $GITHUB_ENV
        echo "TESTING=1" >> $GITHUB_ENV
        echo "MODEL_PATH=models" >> $GITHUB_ENV

    - name: Start API server
      run: |
        cd src
        python -m uvicorn api.main:app --host 0.0.0.0 --port 8000 &
        sleep 10  # Wait for server to start

    - name: Start frontend server
      run: |
        cd frontend
        npm start &
        sleep 15  # Wait for frontend to start

    - name: Run end-to-end tests
      run: |
        python run_tests.py --e2e

    - name: Upload e2e test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: e2e-test-results
        path: |
          htmlcov/
          coverage.xml

  performance-tests:
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python 3.10
      uses: actions/setup-python@v4
      with:
        python-version: "3.10"

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-test.txt

    - name: Run performance tests
      run: |
        python run_tests.py --performance

    - name: Upload performance test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: performance-test-results
        path: |
          htmlcov/
          coverage.xml
