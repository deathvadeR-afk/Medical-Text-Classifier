name: Code Quality

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  lint-python:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"

      - name: Cache pip dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install flake8 black isort mypy bandit ruff

      - name: Run Ruff linter
        run: |
          ruff check src tests --output-format=github

      - name: Run Ruff formatter check
        run: |
          ruff format --check src tests

      - name: Run Flake8
        run: |
          flake8 src tests --count --select=E9,F63,F7,F82 --show-source --statistics
          flake8 src tests --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

      - name: Run Black check
        run: |
          black --check src tests

      - name: Run isort check
        run: |
          isort --check-only src tests

      - name: Run MyPy type checking
        run: |
          mypy src --ignore-missing-imports --no-strict-optional

      - name: Run Bandit security check
        run: |
          bandit -r src -f json -o bandit-report.json || true
          cat bandit-report.json

      - name: Upload Bandit results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: bandit-security-report
          path: bandit-report.json

  lint-frontend:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install dependencies
        run: |
          cd frontend
          npm ci

      - name: Run ESLint
        run: |
          cd frontend
          npm run lint || true

      - name: Run Prettier check
        run: |
          cd frontend
          npx prettier --check src/

      - name: Run TypeScript check
        run: |
          cd frontend
          npx tsc --noEmit

  dependency-review:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    steps:
      - uses: actions/checkout@v4

      - name: Dependency Review
        uses: actions/dependency-review-action@v3
        with:
          fail-on-severity: moderate

  codeql-analysis:
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
      security-events: write

    strategy:
      fail-fast: false
      matrix:
        language: [ 'python', 'javascript' ]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v2
        with:
          languages: ${{ matrix.language }}

      - name: Autobuild
        uses: github/codeql-action/autobuild@v2

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v2
        with:
          category: "/language:${{matrix.language}}"

  check-docs:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Check for broken links in docs
        uses: gaurav-nelson/github-action-markdown-link-check@v1
        with:
          use-quiet-mode: 'yes'
          config-file: '.github/markdown-link-check-config.json'

      - name: Check README
        run: |
          if [ ! -f README.md ]; then
            echo "README.md is missing!"
            exit 1
          fi

      - name: Check CONTRIBUTING
        run: |
          if [ ! -f CONTRIBUTING.md ]; then
            echo "CONTRIBUTING.md is missing!"
            exit 1
          fi

      - name: Check LICENSE
        run: |
          if [ ! -f LICENSE ]; then
            echo "LICENSE is missing!"
            exit 1
          fi

  check-docker:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Check Dockerfile exists
        run: |
          if [ ! -f Dockerfile ]; then
            echo "Dockerfile is missing!"
            exit 1
          fi

      - name: Lint Dockerfile
        uses: hadolint/hadolint-action@v3.1.0
        with:
          dockerfile: Dockerfile
          failure-threshold: warning

      - name: Check docker-compose.yml
        run: |
          if [ ! -f docker-compose.yml ]; then
            echo "docker-compose.yml is missing!"
            exit 1
          fi

      - name: Validate docker-compose
        run: |
          docker-compose config

  check-ci-config:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Check GitHub Actions workflows
        run: |
          if [ ! -d .github/workflows ]; then
            echo ".github/workflows directory is missing!"
            exit 1
          fi
          
          # Check for required workflows
          required_workflows=("test.yml" "docker-build.yml" "deploy.yml" "code-quality.yml")
          for workflow in "${required_workflows[@]}"; do
            if [ ! -f ".github/workflows/$workflow" ]; then
              echo "Required workflow $workflow is missing!"
              exit 1
            fi
          done

      - name: Validate workflow syntax
        uses: docker://rhysd/actionlint:latest
        with:
          args: -color

  summary:
    runs-on: ubuntu-latest
    needs: [lint-python, lint-frontend, check-docs, check-docker, check-ci-config]
    if: always()
    steps:
      - name: Check all jobs status
        run: |
          echo "Code Quality Check Summary:"
          echo "- Python Linting: ${{ needs.lint-python.result }}"
          echo "- Frontend Linting: ${{ needs.lint-frontend.result }}"
          echo "- Documentation Check: ${{ needs.check-docs.result }}"
          echo "- Docker Check: ${{ needs.check-docker.result }}"
          echo "- CI Config Check: ${{ needs.check-ci-config.result }}"
          
          if [[ "${{ needs.lint-python.result }}" == "failure" ]] || \
             [[ "${{ needs.lint-frontend.result }}" == "failure" ]] || \
             [[ "${{ needs.check-docs.result }}" == "failure" ]] || \
             [[ "${{ needs.check-docker.result }}" == "failure" ]] || \
             [[ "${{ needs.check-ci-config.result }}" == "failure" ]]; then
            echo "❌ Some quality checks failed!"
            exit 1
          else
            echo "✅ All quality checks passed!"
          fi

