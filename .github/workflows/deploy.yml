name: Deploy

on:
  push:
    branches: [ main ]
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  deploy-frontend:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/v')
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install dependencies
        run: |
          cd frontend
          npm ci

      - name: Build frontend
        run: |
          cd frontend
          npm run build
        env:
          REACT_APP_API_URL: ${{ secrets.API_URL || 'http://localhost:8000' }}

      - name: Deploy to Netlify
        uses: nwtgck/actions-netlify@v2.0
        with:
          publish-dir: './frontend/build'
          production-branch: main
          github-token: ${{ secrets.GITHUB_TOKEN }}
          deploy-message: "Deploy from GitHub Actions - ${{ github.sha }}"
          enable-pull-request-comment: true
          enable-commit-comment: true
          overwrites-pull-request-comment: true
        env:
          NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}
          NETLIFY_SITE_ID: ${{ secrets.NETLIFY_SITE_ID }}
        timeout-minutes: 5

  deploy-backend:
    runs-on: ubuntu-latest
    needs: []
    if: github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/v')
    
    environment:
      name: ${{ github.event.inputs.environment || 'staging' }}
      url: ${{ steps.deploy.outputs.url }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Log in to Container Registry
        uses: docker/login-action@v4
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Determine image tag
        id: image-tag
        run: |
          if [[ "${{ github.ref }}" == refs/tags/* ]]; then
            echo "tag=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
          else
            echo "tag=${{ github.sha }}" >> $GITHUB_OUTPUT
          fi

      - name: Deploy to Cloud Run (GCP)
        if: secrets.GCP_PROJECT_ID != ''
        id: deploy-gcp
        uses: google-github-actions/deploy-cloudrun@v1
        with:
          service: medical-text-classifier-api
          image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.image-tag.outputs.tag }}
          region: us-central1
          credentials: ${{ secrets.GCP_SA_KEY }}
          env_vars: |
            DATABASE_URL=${{ secrets.DATABASE_URL }}
            MLFLOW_TRACKING_URI=${{ secrets.MLFLOW_TRACKING_URI }}
            MINIO_ENDPOINT=${{ secrets.MINIO_ENDPOINT }}
            MINIO_ACCESS_KEY=${{ secrets.MINIO_ACCESS_KEY }}
            MINIO_SECRET_KEY=${{ secrets.MINIO_SECRET_KEY }}

      - name: Deploy to AWS ECS (Alternative)
        if: secrets.AWS_ACCOUNT_ID != ''
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: .aws/task-definition.json
          service: medical-text-classifier-api
          cluster: production
          wait-for-service-stability: true

      - name: Deploy to Kubernetes (Alternative)
        if: secrets.KUBE_CONFIG != ''
        run: |
          # Set up kubectl
          echo "${{ secrets.KUBE_CONFIG }}" | base64 -d > kubeconfig
          export KUBECONFIG=kubeconfig
          
          # Update deployment with new image
          kubectl set image deployment/medical-text-classifier-api \
            api=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.image-tag.outputs.tag }} \
            --namespace=production
          
          # Wait for rollout
          kubectl rollout status deployment/medical-text-classifier-api \
            --namespace=production \
            --timeout=5m

      - name: Run smoke tests
        run: |
          # Wait for deployment to be ready
          sleep 30
          
          # Test health endpoint
          DEPLOY_URL="${{ steps.deploy-gcp.outputs.url || secrets.DEPLOY_URL }}"
          curl -f ${DEPLOY_URL}/health || exit 1
          
          # Test predict endpoint
          curl -X POST ${DEPLOY_URL}/predict \
            -H "Content-Type: application/json" \
            -d '{"text": "What are the symptoms of diabetes?"}' \
            | jq .

      - name: Notify deployment status
        if: always()
        uses: 8398a7/action-slack@v4
        with:
          status: ${{ job.status }}
          text: |
            Deployment to ${{ github.event.inputs.environment || 'staging' }} ${{ job.status }}
            Commit: ${{ github.sha }}
            Author: ${{ github.actor }}
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}

  rollback:
    runs-on: ubuntu-latest
    needs: [deploy-backend]
    if: failure() && github.ref == 'refs/heads/main'
    
    steps:
      - name: Rollback deployment
        run: |
          echo "Deployment failed. Initiating rollback..."
          # Add rollback logic here based on your deployment platform
          
      - name: Notify rollback
        uses: 8398a7/action-slack@v4
        with:
          status: 'warning'
          text: |
            Deployment failed and was rolled back
            Commit: ${{ github.sha }}
            Author: ${{ github.actor }}
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}

