name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
    tags:
      - 'v*'
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Combined quality checks and testing
  test-and-quality:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.9, "3.11"]  # Reduced matrix for efficiency

    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_medical_text_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}

    - name: Cache pip dependencies
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-test.txt

    - name: Set up environment variables
      run: |
        echo "DATABASE_URL=postgresql://postgres:postgres@localhost:5432/test_medical_text_db" >> $GITHUB_ENV
        echo "TESTING=1" >> $GITHUB_ENV
        echo "LOG_LEVEL=WARNING" >> $GITHUB_ENV
        echo "MODEL_PATH=models" >> $GITHUB_ENV

    - name: Setup test environment and run tests
      run: |
        # Use the run_tests.py script to setup and run tests
        python run_tests.py --all --coverage --html

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results-${{ matrix.python-version }}
        path: |
          htmlcov/
          coverage.xml

  # Docker Build and Security Scan
  build-and-scan:
    runs-on: ubuntu-latest
    needs: test-and-quality
    permissions:
      contents: read
      packages: write
      id-token: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels)
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Run Trivy vulnerability scanner
        if: github.event_name != 'pull_request'
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy results to GitHub Security
        if: github.event_name != 'pull_request'
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'trivy-results.sarif'

  # Test Docker Image
  test-image:
    runs-on: ubuntu-latest
    needs: build-and-scan
    if: github.event_name != 'pull_request'

    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_medical_text_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Pull Docker image
        run: |
          docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}

      - name: Run container
        run: |
          docker run -d \
            --name test-api \
            --network host \
            -e DATABASE_URL=postgresql://postgres:postgres@localhost:5432/test_medical_text_db \
            -e TESTING=1 \
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
          
          # Wait for container to be healthy
          timeout 60 bash -c 'until docker exec test-api curl -f http://localhost:8000/health; do sleep 2; done'

      - name: Test API endpoints
        run: |
          # Test health endpoint
          curl -f http://localhost:8000/health
          
          # Test docs endpoint
          curl -f http://localhost:8000/docs
          
          # Test predict endpoint
          curl -X POST http://localhost:8000/predict \
            -H "Content-Type: application/json" \
            -d '{"text": "What are the symptoms of diabetes?"}' \
            | jq .

      - name: Check container logs
        if: always()
        run: |
          docker logs test-api

      - name: Stop container
        if: always()
        run: |
          docker stop test-api
          docker rm test-api

  # Deploy Application
  deploy:
    runs-on: ubuntu-latest
    needs: [test-image]
    if: github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/v')
    environment:
      name: ${{ github.event.inputs.environment || 'staging' }}
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Determine image tag
        id: image-tag
        run: |
          if [[ "${{ github.ref }}" == refs/tags/* ]]; then
            echo "tag=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
          else
            echo "tag=${{ github.sha }}" >> $GITHUB_OUTPUT
          fi

      - name: Deploy Application
        run: |
          echo "Application built and ready for deployment"
          echo "Image tag: ${{ steps.image-tag.outputs.tag }}"
          echo "Registry: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}"
          
          # This is where you would add your actual deployment steps
          # For example, if deploying to Render:
          # - Set up Render CLI
          # - Deploy to Render services
          # 
          # Or if using docker-compose:
          # - docker-compose up -d
          
          echo "Deployment steps would go here based on your target platform"

      - name: Run smoke tests
        run: |
          echo "Smoke tests would go here after deployment"
          echo "Testing application health and functionality"